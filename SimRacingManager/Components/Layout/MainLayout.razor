@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using SimRacingManager.Core
@using SimRacingManager.Data
@using SimRacingManager.Miscellaneous

@inherits LayoutComponentBase

@* Required *@
<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" @ref="_mudThemeProvider" />
<MudPopoverProvider />

<MudDialogProvider /> @* Needed for dialogs *@
<MudSnackbarProvider /> @* Needed for snackbars *@

@* TODO: Need to fix all warnings during a build *@

<MudLayout> 
    <MudAppBar>
        <MudBadge Content="CurrentVersion" Overlap="true" Class="mx-6 my-4">
            <MudLink Href="/" Underline="Underline.None" Typo="Typo.h5">
                Sim Racing Manager
            </MudLink>
        </MudBadge>
        <MudSpacer/>
        <MudTooltip Text="@selectedTooltip" Arrow="true" Placement="Placement.Bottom">
            <MudIconButton Color="@Color.Inherit" Icon="@selectedIcon" OnClick="@((e) => ToggleDarkMode(true))"/>
        </MudTooltip>
        <MudText Align="Align.End">@_currentDate.ToShortDateString()</MudText>
    </MudAppBar>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="pt-8">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private readonly DateTime _currentDate = DateTime.Today;
    private const string CurrentVersion = "PRE-ALPHA";
    private MudThemeProvider? _mudThemeProvider;

    private string selectedIcon;
    private string selectedTooltip;
    
    private bool _isDarkMode;
    private int _toggleAmount;

    private async void ToggleDarkMode(bool toggle)
    {
        if (toggle) _toggleAmount++;
        if (_toggleAmount >= 3) _toggleAmount = 0;
        
        switch (_toggleAmount)
        {
            case 0:
                selectedIcon = Icons.Material.Filled.LightMode;
                selectedTooltip = "Light Mode";
                break;
            case 1:
                selectedIcon = Icons.Material.Filled.AutoMode;
                selectedTooltip = "Auto Mode";
                break;
            case 2:
                selectedIcon = Icons.Material.Outlined.DarkMode;
                selectedTooltip = "Dark Mode";
                break;
        }

        _isDarkMode = _toggleAmount switch
        {
            0 => true,
            1 => false,
            2 => await _mudThemeProvider.GetSystemDarkModeAsync(),
            _ => _isDarkMode
        };
        StateHasChanged();
    }
    
    protected override void OnInitialized()
    {
        // Everything within this conditional shouldn't be called more than once.
        if (!Globals.HasDatabaseManagerBeenInitialised)
        {
            // If the .env file cannot be found, don't bother making a connection to the database.
            if (DotEnv.SearchForEnvironmentFiles())
            {
                DatabaseManager.Initialise();
                DatabaseManager.FetchAllData();
            }
        }
        Globals.HasDatabaseManagerBeenInitialised = true;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var contains = await LocalStorage.ContainKeyAsync("toggleAmount");
            if (!contains)
            {
                _toggleAmount = 2;
                _isDarkMode = await _mudThemeProvider.GetSystemDarkModeAsync();
                ToggleDarkMode(false);
                await LocalStorage.SetItemAsync("toggleAmount", _toggleAmount);
            }
            else
            {
                _toggleAmount = await LocalStorage.GetItemAsync<int>("toggleAmount");
                _isDarkMode = _toggleAmount switch
                {
                    0 => true,
                    1 => false,
                    2 => await _mudThemeProvider.GetSystemDarkModeAsync(),
                    _ => _isDarkMode
                };
                ToggleDarkMode(false);
            }
            StateHasChanged();
        }
        await LocalStorage.SetItemAsync("toggleAmount", _toggleAmount);
    }
}