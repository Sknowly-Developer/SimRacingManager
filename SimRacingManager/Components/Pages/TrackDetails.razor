@page "/TrackDetails/{TrackGuid:guid}"

@using SimRacingManager.Core
@using Supabase.Postgrest

<MudText Typo="Typo.h5" Align="Align.Center" Class="pb-4">@_trackInstance.Name</MudText>

<MudTable ServerData="FetchResultsFromTrack">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Results</MudText>
    </ToolBarContent>
    <ColGroup>
        <col />
        <col />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>Position</MudTh>
        <MudTh>Driver</MudTh>
        <MudTh>Vehicle</MudTh>
        <MudTh>Time/Retired</MudTh>
        <MudTh>Fastest Lap</MudTh>
        <MudTh>Points</MudTh>
    </HeaderContent>
    <RowTemplate>
        @if (context.Position == 32767) // This is largest smallint, which I am using for drivers that didn't finish the race.
        {
            <MudTd DataLabel="Position">NC</MudTd> // NC stands for Not Classified, means they didn't 100% complete the race.
        }
        else
        {
            <MudTd DataLabel="Position">@context.Position</MudTd>
        }
        <MudTd DataLabel="Driver">[@context.Driver.Number] @context.Driver.Name @context.Driver.Surname</MudTd>
        <MudTd DataLabel="Vehicle">@context.Driver.VehicleType</MudTd>
        @if (context.Time == null)
        {
            <MudTd DataLabel="Time/Retired">DNF</MudTd>
        }
        else
        {
            <MudTd DataLabel="Time/Retired">@context.Time</MudTd>   
        }
        @if (context.FastestLap == null)
        {
            <MudTd DataLabel="Fastest Lap"></MudTd>
        }
        else
        {
            <MudTd DataLabel="Fastest Lap">@context.FastestLap</MudTd>
        }
        <MudTd DataLabel="Points">
            <MudTooltip Text="Arrow Right" Arrow="true" Placement="Placement.Right">
                <ChildContent>@context.TotalPoints</ChildContent>
                <TooltipContent>
                    <MudText Typo="Typo.body2">Race Points: @context.Points</MudText>
                    @if (context.FastestLap != null)
                    {
                        <MudText Typo="Typo.body2">Fastest Lap Point: 1</MudText>
                    }
                    @if (context.ReachingTopXPoints != null)
                    {
                        <MudText Typo="Typo.body2">Reaching Top X Points: @context.ReachingTopXPoints</MudText>   
                    }
                </TooltipContent>
            </MudTooltip>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No race results found...</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Fetching data...</MudText>
    </LoadingContent>
</MudTable>

@code {
    [Parameter]
    public Guid TrackGuid { get; set; }

    private Track _trackInstance;
    
    protected override void OnInitialized()
    {
        foreach (var track in DatabaseManager.Tracks)
        {
            if (track.Guid == TrackGuid)
            {
                _trackInstance = track;
            }
        }
    }
    
    private async Task<TableData<Results>> FetchResultsFromTrack(TableState state, CancellationToken token)
    {
        var data = await DatabaseManager.SupabaseClient.From<Results>()
            .Filter(results => results.Guid, Constants.Operator.In, _trackInstance.ResultsGuid)
            .Order(results => results.Position, Constants.Ordering.Ascending)
            .Get();

        foreach (var result in data.Models)
        {
            result.AssignDriver();
            result.Driver.VehicleType = await result.AssignDriverVehicles();
            result.AddAllPoints();
        }
        
        var totalItems = data.Models.Count;

        var pagedData = data.Models.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();

        return new TableData<Results> { TotalItems = totalItems, Items = pagedData };
    }
}