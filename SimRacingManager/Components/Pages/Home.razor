@page "/"

@using SimRacingManager.Core
@using SimRacingManager.Enumerations
@using Supabase.Postgrest
@using Supabase.Postgrest.Responses

@inject NavigationManager Navigation

@* TODO: Add each year in dynamically as well *@
@* TODO: Need to filter by Year again *@
<MudTable ServerData="FetchChampionships" Hover="true" RowClass="cursor-pointer" T="Championship" OnRowClick="RowClickEvent">
    <ToolBarContent>
        <MudText Typo="Typo.h6">2025 Season</MudText>
    </ToolBarContent>
    <ColGroup>
        <col />
        <col />
        <col />
        <col />
        <col />
        <col />
        <col />
        <col style="width: 1%" />
    </ColGroup>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Year</MudTh>
        <MudTh>Next</MudTh>
        <MudTh>Races</MudTh>
        <MudTh>Period</MudTh>
        <MudTh>Leader</MudTh>
        <MudTh>Car Class</MudTh>
        <MudTh Style="text-align: center">Status</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Year">@context.Year</MudTd>
        @if (context.Next == null)
        {
            <MudTd DataLabel="Next"></MudTd>
        }
        else
        {
            <MudTd DataLabel="Next">@context.Next.Name in <MudChip T="DateTime" Label="true" Color="Color.Primary">@context.TimeRemainingNextTrack Days</MudChip></MudTd>
        }
        @if (context.TracksGuid == null)
        {
            <MudTd DataLabel="Races"></MudTd>   
        }
        else
        {
            <MudTd DataLabel="Races">@context.TracksCompleted / @context.Tracks.Count</MudTd>
        }
        <MudTd DataLabel="Period">@context.CombinedDates</MudTd>
        @if (context.Status == Status.Completed)
        {
            <MudTd DataLabel="Leader">🎉 @context.Winner.Name @context.Winner.Surname 🎉</MudTd>
        }
        else if (context.Winner.Points == 0)
        {
            <MudTd DataLabel="Leader"></MudTd>
        }
        else
        {
            <MudTd DataLabel="Leader">@context.Winner.Name @context.Winner.Surname</MudTd>   
        }
        <MudTd DataLabel="Car Class">@context.CarClass</MudTd>
        <MudTd DataLabel="Status"><MudChip T="string" Label="true" Color="@context.StatusColour">@context.Status</MudChip></MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No records found...</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Fetching data...</MudText>
    </LoadingContent>
</MudTable>

@* TODO: Lap Calculator *@

@code {
    private void RowClickEvent(TableRowClickEventArgs<Championship> tableRowClickEventArgs)
    {
        Navigation.NavigateTo($"ChampionshipDetails/{tableRowClickEventArgs.Item.Guid}");
    }

    private async Task<TableData<Championship>> FetchChampionships(TableState state, CancellationToken token)
    {
        var championshipModels = await DatabaseManager.SupabaseClient.From<Championship>()
            .Get();

        foreach (var championship in championshipModels.Models)
        {
            if (championship.TracksGuid == null)
            {
                championship.Initialise();
                break;
            }
            
            var trackModels = await DatabaseManager.SupabaseClient.From<Track>()
                .Filter(track => track.Guid, Constants.Operator.In, championship.TracksGuid)
                .Order(track => track.Date, Constants.Ordering.Ascending)
                .Get();
            
            foreach (var track in trackModels.Models)
            {
                championship.Tracks.Add(track);
                track.Initialize();
            }
            
            var driverModels = await DatabaseManager.SupabaseClient.From<Driver>()
                .Filter(driver => driver.Guid, Constants.Operator.In, championship.DriversGuid)
                .Get();
            
            championship.Initialise();
            championship.NextRace();
            championship.TracksCompletedCount();
            championship.CombineDates();
            
            await DetermineWinner(driverModels, championship);
        }
        
        var totalItems = championshipModels.Models.Count;

        var pagedData = championshipModels.Models.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList().OrderByDescending(championship => championship.Name); // Need to sort it here otherwise the data is all messed up when it's fetched.

        return new TableData<Championship> { TotalItems = totalItems, Items = pagedData };
    }

    private async Task DetermineWinner(ModeledResponse<Driver> driverModels, Championship championship)
    {
        List<Driver> tempDriverList = [];

        foreach (var driver in driverModels.Models)
        {
            tempDriverList.Add(driver);
            driver.Points = await DatabaseManager.FetchTotalPointsPerChampionship(championship, driver.Guid);
        }

        var sortedDrivers = tempDriverList.OrderByDescending(driver => driver.Points).ToList();
        championship.Winner = sortedDrivers[0];

        if (championship.Winner.Points == 0)
        {
            
        }
    }
}